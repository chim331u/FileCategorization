@page "/filecategorizationindex"
@using Microsoft.AspNetCore.SignalR.Client
@using Fluxor
@using FileCategorization_Web.Features.FileManagement.Actions
@using FileCategorization_Web.Features.FileManagement.Store
@using FileCategorization_Shared.DTOs.FileManagement
@using Radzen
@inject TooltipService tooltipService
@inject NotificationService NotificationService
@inject IState<FileState> FileState
@inject IDispatcher Dispatcher
@implements IDisposable

<RadzenLayout class="rz-shadow-3" Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
<div class="p-2">
    
    <RadzenRow JustifyContent="JustifyContent.SpaceBetween">

        <RadzenButton Click="RefreshFiles" Icon="autorenew" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Large"
        IsBusy=@FileState.Value.IsRefreshing Text="Refresh"
        BusyText="Wait ..." />

        <RadzenSelectBar Value=@FileState.Value.SearchParameter TValue="int" Change=@(args => OnChangeCatParam(args))>
            <Items>
                <RadzenSelectBarItem Text="All" Value="1" />
                <RadzenSelectBarItem Text="Categorized" Value="2" />
                <RadzenSelectBarItem Text="To Categorize" Value="3" />
            </Items>
        </RadzenSelectBar>

        <RadzenButton Text="Train Model" Icon="psychology" Click="TrainModel" ButtonStyle="ButtonStyle.Dark"
        Size="ButtonSize.Large"
        IsBusy=@FileState.Value.IsTraining
        BusyText="Training ..." />


        <RadzenButton Text="Force Categories" Icon="category" Click="ForceCategory" ButtonStyle="ButtonStyle.Dark"
        Size="ButtonSize.Large"
        IsBusy=@FileState.Value.IsCategorizing
        BusyText="Categorizing ..." />


        <RadzenButton ButtonStyle="ButtonStyle.Dark" Icon="drive_file_move" Text="Move"
        Shade="Shade.Default" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="MoveFiles">
        </RadzenButton>
    </RadzenRow>
    @if (FileState.Value.IsLoading)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @* Console moved to MainLayout - now globally visible *@
        @*  @if (_progressIsVisible)
        {
            <RadzenRow class="mb-2">
                <RadzenProgressBar Style="width: 500px" ProgressBarStyle="ProgressBarStyle.Success" @bind-Value="@_progressPercentage" />
            </RadzenRow>
        } *@

        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" Density="Density.Compact"
        FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="9" AllowPaging="true"
        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="250px"
        Data="@FileStateSelectors.GetFilteredFiles(FileState.Value)" TItem="FilesDetailDto" LogicalFilterOperator="LogicalFilterOperator.Or">

            <Columns>

                <RadzenDataGridColumn TItem="FilesDetailDto" Property="Name" Title="Name" Frozen="true" Width="80%" />

                <RadzenDataGridColumn TItem="FilesDetailDto" Property="FileSize" Title="Size" Width="10%" Filterable="false">
                    <Template Context="detail">
                        @FileSizeFormatted(detail.FileSize)
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Context="category" TItem="FilesDetailDto" Property="FileCategory" Title="Category" Width="30%">

                    <Template Context="category">
                        @if (!category.IsNotToMove && category.IsToCategorize)
                        {
                            @if (addCategory == category.Id)
                            {

                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done"                                              
                                Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1"
                                Click="@(args => SaveNewCat(category))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenTextBox @bind-Value="newCategory" Placeholder=" New Category" />
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="undo"                                             
                                Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1"
                                Click="@(args => BackCat())" @onclick:stopPropagation="true">
                                </RadzenButton>

                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="add" Variant="Variant.Flat"
                                Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1"
                                Click="@(args => ShowAddCat(category.Id))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenDropDown AllowClear="true"
                                TValue="string" Class="w-99" Placeholder="Select a Category"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true"
                                Data=@FileState.Value.Categories @bind-Value="@category.FileCategory" />
                            }
                        }
                        else
                        {
                            <RadzenRow JustifyContent="JustifyContent.Stretch">
                                @category.FileCategory
                                @if (category.IsToCategorize)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="To Move" IsPill="true" />
                                }
                            </RadzenRow>
                        }
                    </Template>

                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="FilesDetailDto" Context="detail" Title="Actions" Filterable="false" Sortable="false"
                TextAlign="TextAlign.Center" Width="10%">
                    <Template Context="detail">
                        @if (detail.IsNotToMove)
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="settings_backup_restore" Variant="Variant.Flat"
                            Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1"
                            Click="@(args => Revert(detail))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="schedule" Variant="Variant.Flat"
                            Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1"
                            Click="@(args => Schedule(detail))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }

                        @if (detail.IsToCategorize && !detail.IsNotToMove)
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="visibility_off" Variant="Variant.Flat"
                            Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1"
                            Click="@(args => NotShowAgain(detail))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>


    }
</div>
</RadzenLayout>


@code {
    protected bool _categorization = false;
    protected string newCategory = string.Empty;
    protected int addCategory = 0;
    // private bool _progressIsVisible = false;
    // private double _progressPercentage = 0;
    // private double totalSize;

    // SignalR is now handled by INotificationService - no direct HubConnection needed

    // Console moved to MainLayout GlobalConsole component - no longer needed here


    private string? lastErrorMessage = null;

    protected override Task OnInitializedAsync()
    {
        try
        {
            // Subscribe to state changes for error notifications
            FileState.StateChanged += OnStateChanged;
            
            // Initialize Fluxor state - load initial data
            // SignalR is automatically handled by INotificationService which integrates with Fluxor
            Dispatcher.Dispatch(new LoadCategoriesAction());
            Dispatcher.Dispatch(new LoadFilesAction(FileState.Value.SearchParameter));
            // Application ready message moved to MainLayout to show only on first app load
            
            _categorization = false;
        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new SetErrorAction($"Error: {ex.Message}"));
        }
        
        return Task.CompletedTask;
    }

    private void OnStateChanged(object? sender, EventArgs e)
    {
        var currentState = FileState.Value;
        
        // Check for action completion messages in console
        if (currentState.ConsoleMessages.Any())
        {
            var lastMessage = currentState.ConsoleMessages.LastOrDefault();
            if (lastMessage != null && lastMessage != lastErrorMessage)
            {
                // Check for success messages
                if (lastMessage.Contains("refreshed successfully") || lastMessage.Contains("Refresh completed"))
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Refresh Completed",
                        Detail = "Files have been refreshed successfully",
                        Duration = 4000
                    });
                    lastErrorMessage = lastMessage;
                }
                else if (lastMessage.Contains("categorization completed") || lastMessage.Contains("Force categorization"))
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Categorization Completed",
                        Detail = "File categorization has been completed successfully",
                        Duration = 4000
                    });
                    lastErrorMessage = lastMessage;
                }
                else if (lastMessage.Contains("training completed") || lastMessage.Contains("Model training"))
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Training Completed",
                        Detail = "Model training has been completed successfully",
                        Duration = 4000
                    });
                    lastErrorMessage = lastMessage;
                }
            }
        }
        
        // Check for errors and show notification
        if (!string.IsNullOrEmpty(currentState.Error) && currentState.Error != lastErrorMessage)
        {
            // Check for specific error types
            if (currentState.Error.Contains("Training") || currentState.Error.Contains("train"))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Training Failed",
                    Detail = currentState.Error,
                    Duration = 8000
                });
            }
            else if (currentState.Error.Contains("Refresh") || currentState.Error.Contains("refresh"))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Refresh Failed",
                    Detail = currentState.Error,
                    Duration = 7000
                });
            }
            else if (currentState.Error.Contains("categorization") || currentState.Error.Contains("Force"))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Categorization Failed",
                    Detail = currentState.Error,
                    Duration = 7000
                });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = currentState.Error,
                    Duration = 6000
                });
            }
            
            lastErrorMessage = currentState.Error;
        }
        
        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        // Unsubscribe from state changes
        FileState.StateChanged -= OnStateChanged;
    }


    protected void WriteConsole(string message)
    {
        var timestampedMessage = $"{DateTime.Now.ToString("G")} - {message}";
        Dispatcher.Dispatch(new AddConsoleMessageAction(timestampedMessage));
    }

    private void RefreshFiles()
    {
        Dispatcher.Dispatch(new RefreshDataAction());
    }


    protected void OnChangeCatParam(object value)
    {
        if (value is int searchParam)
        {
            Dispatcher.Dispatch(new LoadFilesAction(searchParam));
        }
    }

    private string FileSizeFormatted(double len)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };

        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        // Adjust the format string to your preferences. For example "{0:0.#}{1}" would
        // show a single decimal place, and no space.
        string result = String.Format("{0:0.##} {1}", len, sizes[order]);
        return result;
    }


    private void Schedule(FilesDetailDto item)
    {
        Dispatcher.Dispatch(new ScheduleFileAction(item.Id));
    }

    private void Revert(FilesDetailDto item)
    {
        Dispatcher.Dispatch(new RevertFileAction(item.Id));
    }

    protected void TrainModel()
    {
        Dispatcher.Dispatch(new TrainModelAction());
    }

    protected void NotShowAgain(FilesDetailDto item)
    {
        Dispatcher.Dispatch(new NotShowAgainFileAction(item));
    }


    protected void ForceCategory()
    {
        Dispatcher.Dispatch(new ForceCategoryAction());
    }

    // protected async Task MoveFile()
    // {
    //     _progressIsVisible = true;
    //     var filesToMove = await _service.GetFileToMove();
    //     _progressPercentage = 0;
    //     totalSize = (from x in filesToMove select x.FileSize).Sum(); // totSize : 100 = movedSize : x

    //     await Task.Run(() => WriteConsole($"{DateTime.Now} - Start moving {filesToMove.Count()} file"));

    //     foreach (var fileToMove in filesToMove)
    //     {
    //         await Task.Run(async () => WriteConsole(await _service.MoveFile(fileToMove.Id, fileToMove.FileCategory))); // Here will be api call

    //         _progressPercentage += Convert.ToDouble(fileToMove.FileSize * 100 / totalSize);
    //         StateHasChanged();
    //     }

    //     totalSize = 0;

    //     await Task.Run(() => WriteConsole($"All file moved{System.Environment.NewLine}"));
    //     StateHasChanged();
    //     await Task.Delay(5000);
    //     _progressIsVisible = false;
    //     _progressPercentage = 0;
    //     await RefreshFileList();
    // }

    protected void MoveFiles()
    {
        // _progressIsVisible = true;

        var filesToMove = FileStateSelectors.GetFilesToMove(FileState.Value);

        // _progressPercentage = 0;
        // totalSize = (from x in filesToMove select x.FileSize).Sum(); // totSize : 100 = movedSize : x

        Dispatcher.Dispatch(new MoveFilesAction(filesToMove));

        // Job scheduling handled by Fluxor effect
    }

    #region Categories

    protected void RefreshCategoryList()
    {
        Dispatcher.Dispatch(new LoadCategoriesAction());
    }

    private void ShowAddCat(int detailId)
    {
        addCategory = detailId;
    }

    private void SaveNewCat(FilesDetailDto item)
    {
        if (!string.IsNullOrEmpty(newCategory))
        {
            // Add new category to state
            Dispatcher.Dispatch(new AddNewCategoryAction(newCategory));
            
            // Update the item directly (since FilesDetailDto is not a record type)
            item.FileCategory = newCategory;
            Dispatcher.Dispatch(new UpdateFileDetailAction(item));
            
            WriteConsole($"Added new category: {newCategory}");
            
            newCategory = string.Empty;
            addCategory = 0;
        }
    }

    private void BackCat()
    {
        newCategory = string.Empty;
        addCategory = 0;
    }

    #endregion

}
