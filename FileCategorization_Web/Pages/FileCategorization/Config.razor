@page "/config"
@using Fluxor
@using FileCategorization_Web.Features.FileManagement.Actions
@using FileCategorization_Web.Features.FileManagement.Store
@inject TooltipService tooltipService
@inherits LayoutComponentBase
@inject NotificationService NotificationService
@inject IState<FileState> FileState
@inject IDispatcher Dispatcher
@implements IDisposable

<RadzenLayout class="rz-shadow-3" Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
<div class="p-2">

    @if (FileState.Value.IsLoading)
    {
        <p><em>Loading configurations...</em></p>
    }
    else
    {
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Config" Click="@InsertRow" Disabled=@(configToInsert != null || configToUpdate != null) />

        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" @ref="configGrid"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="15" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="250px"
                    Data="@FileState.Value.Configurations" TItem="ConfigsDto" LogicalFilterOperator="LogicalFilterOperator.Or"
                    EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow"
                    Sort="@Reset" Page="@Reset" Filter="@Reset">
            <Columns>
                <RadzenDataGridColumn TItem="ConfigsDto" Property="Id" Filterable="false" Title="ID"
                                  Frozen="true" Width="10px" TextAlign="TextAlign.Center" />

                <RadzenDataGridColumn TItem="ConfigsDto" Property="Key" Title="Name" Frozen="true" Width="50px">
                    <EditTemplate Context="config">
                        <RadzenTextBox @bind-Value="config.Key" Style="width:100%; display: block" Name="Key" />
                        <RadzenRequiredValidator Text="Key is required" Component="Key" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ConfigsDto" Property="Value" Title="Value" Frozen="true" Width="50px">
                    <EditTemplate Context="config">
                        <RadzenTextBox @bind-Value="config.Value" Style="width:100%; display: block" Name="Value" />
                        <RadzenRequiredValidator Text="Value is required" Component="Value" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ConfigsDto" Context="config" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="10%">
                    <Template Context="config">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                  Click="@(args => EditRow(config))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(config))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="config">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(config))">
                        </RadzenButton>
                        <RadzenButton Icon="undo" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(config))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>

    }
</div>

</RadzenLayout>
@code {
    // Legacy service removed - now using Fluxor state management
    private string? lastActionType = null;
    private string? lastActionMessage = null;

    protected override Task OnInitializedAsync()
    {
        // Subscribe to state changes
        FileState.StateChanged += OnStateChanged;
        
        Dispatcher.Dispatch(new LoadConfigurationsAction());
        return Task.CompletedTask;
    }

    private void OnStateChanged(object? sender, EventArgs e)
    {
        // Check for notifications to show based on last console message
        var currentState = FileState.Value;
        
        // Look for CRUD operation completion messages in console
        if (currentState.ConsoleMessages.Any())
        {
            var lastMessage = currentState.ConsoleMessages.LastOrDefault();
            if (lastMessage != null && lastMessage != lastActionMessage)
            {
                ShowNotificationForAction(lastMessage);
                lastActionMessage = lastMessage;
                
                // Refresh grid after CRUD operations
                if (lastMessage.Contains("created successfully") || 
                    lastMessage.Contains("updated successfully") || 
                    lastMessage.Contains("deleted successfully"))
                {
                    InvokeAsync(async () => 
                    {
                        await configGrid?.Reload();
                        StateHasChanged();
                    });
                    return;
                }
            }
        }
        
        InvokeAsync(() => StateHasChanged());
    }

    private void ShowNotificationForAction(string message)
    {
        // Parse the console message to show appropriate UI notification
        if (message.Contains("created successfully"))
        {
            var configKey = ExtractConfigKeyFromMessage(message);
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Configuration Created",
                Detail = $"Configuration '{configKey}' has been created successfully",
                Duration = 4000
            });
        }
        else if (message.Contains("updated successfully"))
        {
            var configKey = ExtractConfigKeyFromMessage(message);
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Configuration Updated",
                Detail = $"Configuration '{configKey}' has been updated successfully",
                Duration = 4000
            });
        }
        else if (message.Contains("deleted successfully"))
        {
            var configKey = ExtractConfigKeyFromMessage(message);
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Configuration Deleted",
                Detail = $"Configuration '{configKey}' has been deleted successfully",
                Duration = 4000
            });
        }
        else if (message.Contains("Error") || message.Contains("Failed"))
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Configuration Error",
                Detail = message,
                Duration = 6000
            });
        }
    }

    private string ExtractConfigKeyFromMessage(string message)
    {
        // Extract a config key from a message like "Configuration 'DESTDIR' created successfully"
        var startIndex = message.IndexOf("'") + 1;
        var endIndex = message.IndexOf("'", startIndex);
        
        if (startIndex > 0 && endIndex > startIndex)
        {
            return message.Substring(startIndex, endIndex - startIndex);
        }
        
        return "Configuration";
    }

    public void Dispose()
    {
        // Unsubscribe from state changes
        FileState.StateChanged -= OnStateChanged;
    }

    ConfigsDto? configToUpdate;
    ConfigsDto? configToInsert;
    RadzenDataGrid<ConfigsDto>? configGrid;

    async Task EditRow(ConfigsDto config)
    {
        configToUpdate = config;

        await configGrid!.EditRow(config);
    }

    void OnUpdateRow(ConfigsDto config)
    {
        if (config == configToInsert)
        {
            configToInsert = null;
        }

        configToUpdate = null;
        
        Dispatcher.Dispatch(new UpdateConfigurationAction(config));
    }

    void OnCreateRow(ConfigsDto config)
    {
        configToInsert = null;
        
        Dispatcher.Dispatch(new CreateConfigurationAction(config));
        // Notifications are now handled by Fluxor effects
    }
    protected async Task SaveRow(ConfigsDto config)
    {
        await configGrid!.UpdateRow(config);
    }

    protected void CancelEdit(ConfigsDto config)
    {
        if (config == configToInsert)
        {
            configToInsert = null;
        }

        configToUpdate = null;

        // Refresh configuration will be handled by Fluxor effect
        configGrid!.CancelEditRow(config);
    }

    protected async Task InsertRow()
    {
        configToInsert = new ConfigsDto();

        await configGrid!.InsertRow(configToInsert);
    }

    protected void DeleteRow(ConfigsDto config)
    {
        if (config == configToInsert)
        {
            configToInsert = null;
        }

        if (config == configToUpdate)
        {
            configToUpdate = null;
        }

        Dispatcher.Dispatch(new DeleteConfigurationAction(config));
    }

    private void Reset()
    {
        configToInsert = null;
        configToUpdate = null;
    }
    
}
