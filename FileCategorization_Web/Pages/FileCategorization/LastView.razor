@page "/lastview"
@using Fluxor
@using FileCategorization_Web.Features.FileManagement.Actions
@using FileCategorization_Web.Features.FileManagement.Store
@using FileCategorization_Shared.DTOs.FileManagement
@inject TooltipService tooltipService
@inherits LayoutComponentBase
@inject NotificationService NotificationService
@inject IState<FileState> FileState
@inject IDispatcher Dispatcher
@implements IDisposable

<RadzenLayout class="rz-shadow-3" Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
<div class="p-2">

    @if (FileState.Value.IsLoading)
    {
        <p><em>Loading ...</em></p>
    }
    else
    {
        <RadzenRow>
            <RadzenTextBox Placeholder="Search" Value="@searchText" @oninput=@OnInput Name="Search" type="search" />
        </RadzenRow>

        <br />
        <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        RowRender="@RowRender" ExpandMode="DataGridExpandMode.Single"
                        Data="@FilteredFiles" TItem="FilesDetailDto" RowExpand="RowExpand">
            <Template Context="file">
                @if (FileState.Value.IsLoading && FileState.Value.ExpandedCategory == file.FileCategory)
                {
                    <div class="p-3">
                        <p><em>Loading files for category "@file.FileCategory"...</em></p>
                    </div>
                }
                else if (FileState.Value.ExpandedCategory == file.FileCategory && FileState.Value.ExpandedCategoryFiles.Any())
                {
                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@FileState.Value.ExpandedCategoryFiles" TItem="FilesDetailDto">
                    <Columns>
                        <RadzenDataGridColumn TItem="FilesDetailDto" Property="FileCategory" Title="Category" Filterable="false" />
                        <RadzenDataGridColumn TItem="FilesDetailDto" Property="Name" Title="Name" />
                        <RadzenDataGridColumn TItem="FilesDetailDto" Property="FileSize" Title="Size">
                            <Template Context="detail">
                                @FileSizeFormatted(detail.FileSize)
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="FilesDetailDto" Context="file" Title="Actions" Filterable="true" Sortable="false"
                                              TextAlign="TextAlign.Center" Width="10%">

                            <Template Context="detail">
                                @if (!detail.IsNotToMove)
                                {
                                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="visibility_off" Variant="Variant.Flat"
                                                  Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1"
                                                  Click="@(args => NotShowAgain(detail))" @onclick:stopPropagation="true"
                                                  MouseEnter="@(args => ShowTooltipNotShowAgain(args, new TooltipOptions()
                                                                            { Position = TooltipPosition.Left }))">
                                    </RadzenButton>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                    </RadzenDataGrid>
                }
                else if (FileState.Value.ExpandedCategory == file.FileCategory && !FileState.Value.ExpandedCategoryFiles.Any())
                {
                    <div class="p-3">
                        <p><em>No files found for category "@file.FileCategory"</em></p>
                    </div>
                }
                else
                {
                    <div class="p-3">
                        <p><em>Click to load files for category "@file.FileCategory"</em></p>
                    </div>
                }
            </Template>
            <Columns>
                <RadzenDataGridColumn TItem="FilesDetailDto" Property="FileCategory" Title="Category" Width="20%" Filterable="false" Sortable="false" />
                <RadzenDataGridColumn TItem="FilesDetailDto" Property="Name" Title="Name" Width="70%" Filterable="true" Sortable="true" />

                <RadzenDataGridColumn TItem="FilesDetailDto" Property="FileSize" Title="Size" Width="200px" Filterable="true" Sortable="true">
                    <Template Context="detail">
                        @FileSizeFormatted(detail.FileSize)
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    }
</div>
</RadzenLayout>
@code {
    // Legacy service removed - now using Fluxor state management
    RadzenDataGrid<FilesDetailDto>? grid;
    string? searchText;
    private FilesDetailDto? currentlyExpandedRow = null;

    protected override Task OnInitializedAsync()
    {
        // Subscribe to state changes
        FileState.StateChanged += OnStateChanged;
        
        Dispatcher.Dispatch(new LoadLastViewFilesAction()); // Load last view files via v2/files/lastview
        return Task.CompletedTask;
    }

    private void OnStateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(async () => 
        {
            StateHasChanged();
            
            // If we have a row that should be expanded and we just loaded data for its category
            if (currentlyExpandedRow != null && 
                FileState.Value.ExpandedCategory == currentlyExpandedRow.FileCategory &&
                FileState.Value.ExpandedCategoryFiles.Any() &&
                !FileState.Value.IsLoading &&
                grid != null)
            {
                // Small delay to ensure the grid is rendered
                await Task.Delay(100);
                try
                {
                    await grid.ExpandRow(currentlyExpandedRow);
                }
                catch (Exception ex)
                {
                    // Log but don't crash if expansion fails
                    Console.WriteLine($"Failed to expand row: {ex.Message}");
                }
            }
        });
    }

    public void Dispose()
    {
        // Unsubscribe from state changes
        FileState.StateChanged -= OnStateChanged;
    }

    private void RefreshList()
    {
        Dispatcher.Dispatch(new LoadLastViewFilesAction()); // Refresh last view files
    }

    void RowRender(RowRenderEventArgs<FilesDetailDto> args)
    {
    }

    void RowExpand(FilesDetailDto item)
    {
        // Track which row should be expanded
        currentlyExpandedRow = item;
        
        // Check if we already have data for this category and it's the currently expanded one
        if (FileState.Value.ExpandedCategory == item.FileCategory && FileState.Value.ExpandedCategoryFiles.Any())
        {
            // Data already loaded, just ensure the row stays expanded
            StateHasChanged();
            return;
        }
        
        // Call API v2 to get all files for the category
        Dispatcher.Dispatch(new LoadFilesByCategoryAction(item.FileCategory));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //base.OnAfterRender(firstRender);

        //if (firstRender)
        //{
        //    await grid.ExpandRow(files.FirstOrDefault());
        //}
    }

    protected void NotShowAgain(FilesDetailDto item)
    {
        Dispatcher.Dispatch(new NotShowAgainFileAction(item));
    }

    void ShowTooltipNotShowAgain(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Not Show Again", options);

    private string FileSizeFormatted(double len)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };

        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        // Adjust the format string to your preferences. For example "{0:0.#}{1}" would
        // show a single decimal place, and no space.
        string result = String.Format("{0:0.##} {1}", len, sizes[order]);
        return result;
    }

    void OnInput(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        searchText = args.Value?.ToString();
        // Search filtering is now handled by FileState and computed properties
        // The search can be implemented through selectors or local computed property
        StateHasChanged();
    }
    
    // Computed property for filtered files based on search
    private IEnumerable<FilesDetailDto> FilteredFiles => 
        string.IsNullOrEmpty(searchText) 
            ? FileState.Value.Files
            : FileState.Value.Files.Where(x => 
                x.Name.ToUpper().Contains(searchText.ToUpper()) || 
                x.FileCategory.ToUpper().Contains(searchText.ToUpper()));
}
}